#!/usr/bin/env python3
"""
format_pathology_mongodb.py
---------------------------
Format extracted pathology data according to the actual MongoDB schema with proper parameter_id mappings.

Usage:
    python smf/scripts/format_pathology_mongodb.py --input "smf/data/pathology/pathology_data_Report Tue, Feb 18 - 2025.json"
"""

import argparse
import json
import re
from datetime import datetime
from pathlib import Path

def parse_reference_interval(ref_str: str):
    """Parse reference interval string into proper format."""
    if not ref_str or ref_str.strip() == "":
        return None
    
    ref_str = ref_str.strip()
    
    # Try to parse numeric ranges like "13.0 - 17.0" or "40-80"
    range_match = re.match(r'^(\d+\.?\d*)\s*-\s*(\d+\.?\d*)$', ref_str)
    if range_match:
        low = float(range_match.group(1))
        high = float(range_match.group(2))
        return {"low": low, "high": high}
    
    # For complex ranges or non-numeric, keep as string
    return ref_str

def get_parameter_mapping():
    """Return mapping of parameter names to MongoDB parameter_ids."""
    return {
        "Hemoglobin": "65dcbbff3012fd1f2b81ed23",
        "RBC Count": "66b4520e99e0f8155af76bbb", 
        "Hematocrit": None,  # Not found in search
        "MCV": "66b99875b24811d93e003516",
        "MCH": "66b99a11f35babdfc3ddff28",
        "MCHC": "66b99c8bc145a51f9e015774",
        "RDW": None,  # Not found in search
        "Total Leukocyte Count": None,  # Not found in search
        "Neutrophils": "66825b2beaf6c5bb046acf6f",  # SEGMENTED NEUTROPHILS
        "Lymphocytes": "65dcbc003012fd1f2b81ed34",
        "Monocytes": None,  # Not found in search
        "Eosinophils": None,  # Not found in search
        "Basophils": None,  # Not found in search
        "Absolute Neutrophil Count": None,  # Not found in search
        "Absolute Lymphocyte Count": None,  # Not found in search
        "Absolute Monocyte Count": None,  # Not found in search
        "Absolute Eosinophil Count": None,  # Not found in search
        "Absolute Basophil Count": None,  # Not found in search
        "Platelet Count": "65dcbc003012fd1f2b81ed39",
        "MPV": "66b99ebe7936a32cd05c03c5",
        "Glycated Hemoglobin": None,  # Not found in search
        "Creatinine": "66b4a3c459cc60bfb4958d29",  # SERUM CREATININE
        "Triglycerides": "65dcbc023012fd1f2b81ed69"
    }

def format_patientdata_document(extracted_param, patient_oid="", report_oid=""):
    """Format a single parameter document according to MongoDB schema."""
    
    parameter_mapping = get_parameter_mapping()
    param_name = extracted_param["parameter_name"]
    parameter_id = parameter_mapping.get(param_name)
    
    # Parse reference interval
    ref_interval = parse_reference_interval(extracted_param.get("reference_interval", ""))
    
    # Format the document
    formatted_doc = {
        "_id": {"$oid": ""},  # Will be auto-generated by MongoDB
        "patient": {"$oid": patient_oid},
        "parameter_id": {"$oid": parameter_id} if parameter_id else None,
        "parameter_name": param_name.upper(),  # Match database format
        "date": extracted_param["date"],
        "value": extracted_param["value"],
        "units": extracted_param["units"],
        "reference_interval": ref_interval,
        "method": extracted_param["method"],
        "source": {
            "page_index": extracted_param["source"]["page_index"],
            "report": {"$oid": report_oid}
        },
        "audit": {
            "created_on": {"$date": datetime.now().isoformat() + "Z"}
        },
        "schema_version": "2.0"
    }
    
    return formatted_doc

def main():
    parser = argparse.ArgumentParser(description="Format pathology data for MongoDB")
    parser.add_argument("--input", required=True, type=Path, help="Input JSON file with extracted pathology data")
    parser.add_argument("--output", type=Path, help="Output JSON file (optional)")
    parser.add_argument("--patient-id", default="", help="Patient ObjectId")
    parser.add_argument("--report-id", default="", help="Report ObjectId")
    args = parser.parse_args()
    
    if not args.input.exists():
        print(f"Error: Input file {args.input} does not exist")
        return
    
    # Read extracted pathology data
    with open(args.input, 'r') as f:
        extracted_data = json.load(f)
    
    print(f"Processing {len(extracted_data)} extracted parameters...")
    
    # Format each parameter
    formatted_documents = []
    mapped_count = 0
    unmapped_params = []
    
    for param in extracted_data:
        formatted_doc = format_patientdata_document(
            param, 
            patient_oid=args.patient_id,
            report_oid=args.report_id
        )
        
        if formatted_doc["parameter_id"]:
            mapped_count += 1
        else:
            unmapped_params.append(param["parameter_name"])
        
        formatted_documents.append(formatted_doc)
    
    # Create summary
    summary = {
        "total_parameters": len(extracted_data),
        "mapped_parameters": mapped_count,
        "unmapped_parameters": len(unmapped_params),
        "unmapped_list": unmapped_params,
        "patient_id": args.patient_id,
        "report_id": args.report_id,
        "generated_on": datetime.now().isoformat() + "Z"
    }
    
    # Prepare output
    output_data = {
        "summary": summary,
        "patientdata_documents": formatted_documents
    }
    
    # Save output
    if args.output:
        output_path = args.output
    else:
        output_path = args.input.parent / f"mongodb_formatted_{args.input.stem}.json"
    
    with open(output_path, 'w') as f:
        json.dump(output_data, f, indent=2)
    
    print(f"\nFormatting Summary:")
    print(f"  Total parameters: {summary['total_parameters']}")
    print(f"  Mapped to parameter_id: {summary['mapped_parameters']}")
    print(f"  Unmapped parameters: {summary['unmapped_parameters']}")
    
    if unmapped_params:
        print(f"\nUnmapped parameters:")
        for param in unmapped_params:
            print(f"  - {param}")
        print(f"\nThese parameters need to be added to the parameters collection first.")
    
    print(f"\nFormatted data saved to: {output_path}")
    
    # Show sample documents
    print(f"\nSample formatted documents:")
    print("=" * 80)
    for i, doc in enumerate(formatted_documents[:3], 1):
        print(f"Sample {i}: {doc['parameter_name']}")
        print(f"  Parameter ID: {doc['parameter_id']}")
        print(f"  Value: {doc['value']} {doc['units']}")
        print(f"  Reference: {doc['reference_interval']}")
        print(f"  Method: {doc['method']}")
        print()

if __name__ == "__main__":
    main() 